AWSTemplateFormatVersion: "2010-09-09"
Description: A CloudFormation template for voice controlled photo album app
Resources:
  FrontEndBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties: 
      AccessControl: PublicRead
      #BucketName: f2020-a3-static-website-host-bucket
      WebsiteConfiguration:
        IndexDocument: index.html
      VersioningConfiguration: 
        Status: Enabled
    
  PhotoBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties: 
      AccessControl: PublicRead
      #BucketName: a3-b2-jars

  CodePipelineBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties: 
      AccessControl: PublicRead
      #BucketName: codepipeline-us-east-1-441414766425

  RestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: Cloud A3 - Voice Controlled Photo Search-cftest
      Description: Voice Controlled Photo Search

  Photo:
    Type: AWS::ApiGateway::Model
    Properties:
      RestApiId: !Ref RestApi
      ContentType: application/json
      Description: Photo model
      Name: Photo
      Schema:
        type: object
        properties:
          url:
            type: string
          labels:
            type: array
            items:
              type: string

  SearchResponse:
    Type: AWS::ApiGateway::Model
    Properties: 
      ContentType: application/json
      Description: SearchResponse model
      Name: SearchResponse
      RestApiId: !Ref RestApi
      Schema:
        type: object
        properties:
          results:
            type: array

  search:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !GetAtt 
        - RestApi
        - RootResourceId
      PathPart: search
  
  searchmethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: False
      HttpMethod: GET
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: GET
        Uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:456240511584:function:A3-LF2/invocations"
      MethodResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: true
            ResponseModels: 
              application/json: SearchResponse
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: true
          - StatusCode: 403
            ResponseModels: 
              application/json: Error
          - StatusCode: 500
            ResponseModels: 
              application/json: Error
      RequestParameters: 
        method.request.querystring.q: true
      AuthorizationType: NONE
      ResourceId: !Ref search
      RestApiId: !Ref RestApi

  upload:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !GetAtt 
        - RestApi
        - RootResourceId
      PathPart: upload

  bucket:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !Ref upload
      PathPart: '{bucket}'

  key:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !Ref bucket
      PathPart: '{key}'

  uploadmethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: False
      HttpMethod: PUT
      Integration:
        Credentials: arn:aws:iam::456240511584:role/A3-cf-admin
        IntegrationHttpMethod: PUT
        Type: "AWS"
        Uri: arn:aws:apigateway:us-east-1:s3:action/PutObject&Bucket={bucket}&Key={key}"
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,x-requested-with'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,PUT,GET,POST'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
      MethodResponses: 
          - StatusCode: 200
            ResponseParameters:
              method.response.header.X-Requested-With: true
              method.response.header.Access-Control-Allow-Headers: true
              method.response.header.Access-Control-Allow-Origin: true
              method.response.header.Access-Control-Allow-Methods: true
          - StatusCode: 403
            ResponseModels: 
              application/json: Error
          - StatusCode: 500
            ResponseModels: 
              application/json: Error
      AuthorizationType: "NONE"
      ResourceId: !Ref key
      RestApiId: !Ref RestApi

  Deployment: 
    Type: AWS::ApiGateway::Deployment
    Properties: 
      RestApiId: !Ref RestApi
      Description: "My deployment"
      StageName: "test"
    DependsOn:
      - searchmethod
      - uploadmethod

  APIStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      RestApiId: !Ref RestApi
      StageName: v1
      DeploymentId: !Ref Deployment
    DependsOn:
      - searchmethod
      - uploadmethod
      - Deployment
  
  FrontEndPipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties: 
      ArtifactStore: 
        Location: !Ref CodePipelineBucket
        Type: S3
      RoleArn: arn:aws:iam::456240511584:role/service-role/AWSCodePipelineServiceRole-us-east-1-f2020-a3-pipeline-1
      Stages: 
        - Name: Source 
          Actions: 
            - Name: Source
              ActionTypeId: 
                Category: Source 
                Owner: ThirdParty 
                Version: 1
                Provider: GitHub
              Configuration:
                Owner: AnchitCap
                Repo: voice-controlled-photo-search
                Branch: front-end
                #OAuthToken: 514b8a54386fd3ad7b20a54c7f097d9030079c05
                OAuthToken: ee7afcbc1804b72d20788aa7915be9a4f66debb0
              OutputArtifacts:
                - Name: SourceArtifact
        - Name: Deploy
          Actions:
            - Name: Deploy
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: S3
                Version: 1
              Configuration:
                #BucketName: f2020-a3-static-website-host-bucket
                BucketName: !Ref FrontEndBucket
                Extract: True
              InputArtifacts:
                - Name: SourceArtifact
  
  LambdaCodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties: 
      #Name: f2020-a3-pipeline-1
      ArtifactStore: 
        Location: !Ref CodePipelineBucket
        Type: S3
      RestartExecutionOnUpdate: True
      RoleArn: arn:aws:iam::456240511584:role/service-role/AWSCodePipelineServiceRole-us-east-1-f2020-a3-pipeline-1
      Stages: 
        - Name: Source 
          Actions: 
            - Name: Source
              ActionTypeId: 
                Category: Source 
                Owner: ThirdParty 
                Version: 1
                Provider: GitHub
              Configuration:
                Owner: AnchitCap
                Repo: voice-controlled-photo-search
                #Branch: main
                Branch: test
                #OAuthToken: 514b8a54386fd3ad7b20a54c7f097d9030079c05
                OAuthToken: ee7afcbc1804b72d20788aa7915be9a4f66debb0
              OutputArtifacts:
                - Name: SourceArtifact
        - Name: Build
          Actions: 
            - Name: Build
              ActionTypeId: 
                Category: Build 
                Owner: AWS 
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: 'A3-SAM-Build-Project'
              InputArtifacts:
                - Name: SourceArtifact
              OutputArtifacts: 
                - Name: BuildArtifact
        - Name: Deploy
          Actions:
            - Name: Deploy
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: 1
              Configuration:
                ActionMode: CHANGE_SET_REPLACE 
                Capabilities: CAPABILITY_NAMED_IAM,CAPABILITY_AUTO_EXPAND
                ChangeSetName: !Sub '${AWS::StackName}-changeset'
                RoleArn: arn:aws:iam::456240511584:role/a3-cloud-formation-role
                StackName: !Ref "AWS::StackName"
                TemplatePath: 'BuildArtifact::outputtemplate.yml'
              OutputArtifacts: []
              InputArtifacts:
                - Name: BuildArtifact

  # ElasticSearch:
  #   Type: AWS::Elasticsearch::Domain
  #   Properties:  
  #     DomainName: photos
  #     AccessPolicies:
  #       Version: "2012-10-17"
  #       Statement:
  #         - Effect: "Allow"
  #           Principal:
  #             AWS: 
  #               - "arn:aws:iam::456240511584:user/jak"
  #               - "arn:aws:iam::456240511584:user/anchit"
  #               - "arn:aws:iam::456240511584:user/ronak"
  #               - "arn:aws:iam::456240511584:user/shawn"
  #           Action: "es:*"
  #           Resource: "arn:aws:es:us-east-1:456240511584:domain/photos-cftest2/*"
  #     ElasticsearchClusterConfig:
  #       DedicatedMasterEnabled: "false"
  #       InstanceCount: "1"
  #       ZoneAwarenessEnabled: "false"
  #       InstanceType: "t2.small.elasticsearch"
  #     EBSOptions:
  #       EBSEnabled: true
  #       Iops: 0
  #       VolumeSize: 10
  #       VolumeType: "gp2"
  #     ElasticsearchVersion: "7.9"